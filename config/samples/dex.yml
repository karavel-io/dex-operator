apiVersion: dex.karavel.io/v1alpha1
kind: Dex
metadata:
  name: example
  namespace: default
spec:
  publicHost: dex.example.com
  instanceLabels:
    dex.karavel.io/instance: example
  connectors:
    - type: mockCallback
      id: mock
      name: Example
      config: |
        hello: world
---
apiVersion: v1
kind: Secret
metadata:
  name: github-dex-secrets
  namespace: default
stringData:
  GITHUB_CLIENT_ID: hello
---
apiVersion: dex.karavel.io/v1alpha1
kind: Dex
metadata:
  name: github
  namespace: default
spec:
  publicHost: dex.example.com
  replicas: 1
  instanceLabels:
    dex.karavel.io/instance: github
  envFrom:
    - secretRef:
        name: github-dex-secrets
  connectors:
    - type: github
      id: github
      name: GitHub
      config: |
        # Credentials can be string literals or pulled from the environment.
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.example.com/callback

        # Optional organizations and teams, communicated through the "groups" scope.
        #
        # NOTE: This is an EXPERIMENTAL config option and will likely change.
        #
        # Legacy 'org' field. 'org' and 'orgs' cannot be used simultaneously. A user
        # MUST be a member of the following org to authenticate with dex.
        # org: my-organization
        #
        # Dex queries the following organizations for group information if the
        # "groups" scope is provided. Group claims are formatted as "(org):(team)".
        # For example if a user is part of the "engineering" team of the "coreos"
        # org, the group claim would include "coreos:engineering".
        #
        # If orgs are specified in the config then user MUST be a member of at least one of the specified orgs to
        # authenticate with dex.
        #
        # If neither 'org' nor 'orgs' are specified in the config and 'loadAllGroups' setting set to true then user
        # authenticate with ALL user's Github groups. Typical use case for this setup:
        # provide read-only access to everyone and give full permissions if user has 'my-organization:admins-team' group claim.
        orgs:
          - name: my-organization
            # Include all teams as claims.
          - name: my-organization-with-teams
            # A white list of teams. Only include group claims for these teams.
            teams:
              - red-team
              - blue-team
        # Flag which indicates that all user groups and teams should be loaded.
        loadAllGroups: false

        # Optional choice between 'name' (default), 'slug', or 'both'.
        #
        # As an example, group claims for member of 'Site Reliability Engineers' in
        # Acme organization would yield:
        #   - ['acme:Site Reliability Engineers'] for 'name'
        #   - ['acme:site-reliability-engineers'] for 'slug'
        #   - ['acme:Site Reliability Engineers', 'acme:site-reliability-engineers'] for 'both'
        teamNameField: slug
        # flag which will switch from using the internal GitHub id to the users handle (@mention) as the user id.
        # It is possible for a user to change their own user name but it is very rare for them to do so
        useLoginAsID: false
